'use strict';var mongoose = require('mongoose');var Promise = require('bluebird');mongoose.Promise = Promise;var config = require('../../config');mongoose.connect(config.MONGO_URI);var db = mongoose.connection;const errors = require('../errors');db.on('error', function () {    console.log('error occured from db');});db.once('open', function dbOpen() {    console.log('successfully opened the db');});const Category = require('./models/Category');module.exports = {    category: {        get: function (query) {            if (query.alphabet) {                return Category.find({                    category: new RegExp('^' + '[' + query.alphabet + ']', 'i')                }).exec();            }            else {                return Category.find({}).exec();            }        },        getById: function (id) {            return Category.findById(id).exec()                .catch(errors.throwDatabaseError)                .then(errors.throwNotFoundIfNull);        },        create: function (body) {            return Category.create(body)                .catch(errors.throwDatabaseError);        },        update: function (id, body) {            //console.log(body);            return Category.findById(id).exec(function(err, category) {                if(category) {                    if (body.category) {                        category.category = body.category;                    }                    if (body.shortcut) {                        category.shortcut = body.shortcut;                    }                    //todo: validate shortcut error (JOI??)                    category.save()                        .catch(errors.throwDatabaseError);                }            })                .catch(errors.throwDatabaseError)                .then(errors.throwNotFoundIfNull);        },        delete: function (id) {            return Category.findById(id).exec()                .catch(errors.throwDatabaseError)                .then(errors.throwNotFoundIfNull)                .then(function (category) {                    return category.remove();                })        }    }};