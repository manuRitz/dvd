const Promise = require('bluebird');const errors = require('../errors');const log = require('../../logger').default;var mongoose = require('mongoose');mongoose.Promise = Promise;const Category = require('./models/Category');class Database {    constructor(config) {        this.config = config;        this.conn = mongoose.createConnection(config.MONGO_URI);        this.Category = Category(this.conn);    }    findCategory(params) {        if (params.alphabet) {            return this.Category.find({                category: new RegExp('^' + '[' + params.alphabet + ']', 'i')            }).exec();        }        else {            return this.Category.find({}).exec();        }    }    getCategory(id) {        return this.Category.findById(id).exec()            .catch(errors.throwDatabaseError)            .then(errors.throwNotFoundIfNull);    }    createCategory(body) {        return this.Category.create(body)            .catch(errors.throwDatabaseError);    }    updateCategory(id, body) {        return this.Category.findById(id).exec(function (err, category) {            if (category) {                if (body.category) {                    category.category = body.category;                }                if (body.shortcut) {                    category.shortcut = body.shortcut;                }                //todo: validate shortcut error (JOI??)                category.save()                    .catch(errors.throwDatabaseError);            }        })            .catch(errors.throwDatabaseError)            .then(errors.throwNotFoundIfNull);    }    deleteCategory(id) {        return this.Category.findById(id).exec()            .catch(errors.throwDatabaseError)            .then(errors.throwNotFoundIfNull)            .then(function (category) {                return category.remove();            });    }}module.exports = Database;