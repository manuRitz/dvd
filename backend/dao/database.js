const Promise = require('bluebird');const errors = require('../errors');const log = require('../../logger').default;var mongoose = require('mongoose');mongoose.Promise = Promise;const Category = require('./models/Category');const Film = require('./models/Film');class Database {    constructor(config) {        this.config = config;        this.conn = mongoose.createConnection(config.MONGO_URI);        this.Category = Category(this.conn);        this.Film = Film(this.conn);    }    findCategory(params) {        if (params.alphabet) {            return this.Category.find({                category: new RegExp('^' + '[' + params.alphabet + ']', 'i')            }).exec();        }        else {            return this.Category.find({}).exec();        }    }    getCategory(id) {        return this.Category.findById(id).exec()            .catch(errors.throwDatabaseError)            .then(errors.throwNotFoundIfNull);    }    createCategory(body) {        return this.Category.create(body)            .catch(errors.throwDatabaseError);    }    updateCategory(id, body) {        return this.Category.findOneAndUpdate({_id: id}, body, {upsert: true, new: true}).exec()            .catch(errors.throwDatabaseError)            .then(errors.throwNotFoundIfNull);    }    deleteCategory(id) {        return this.Category.findOneAndRemove({_id: id}).exec()            .catch(errors.throwDatabaseError)            .then(errors.throwNotFoundIfNull);    }    findFilm () {        return this.Film.find({}).exec();    }    getFilm (id) {        return this.Film.findById(id).exec()            .catch(errors.throwDatabaseError)            .then(errors.throwNotFoundIfNull);    }    createFilm (body) {        return this.Film.create(body).exec()            .catch(errors.throwDatabaseError);    }    updateFilm (id, body) {        return this.Film.findOneAndUpdate({_id: id}, body, {upsert: true, new: true}).exec()            .catch(errors.throwDatabaseError)            .then(errors.throwNotFoundIfNull);    }    deleteFilm (id) {        return this.Film.findOneAndRemove({_id: id}).exec()            .catch(errors.throwDatabaseError)            .then(errors.throwNotFoundIfNull);    }}module.exports = Database;